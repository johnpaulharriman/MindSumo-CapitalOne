{
	"version": 3,
	"file": "C:/Users/johnw/Linux/Cap1/johnpaulharriman.github.io/Recommend/__javascript__/recommending.mod.js",
	"sources": [
		"C:/Users/johnw/Linux/Cap1/johnpaulharriman.github.io/Recommend/recommending.py"
	],
	"sourcesContent": [
		"import math\n\n\ndata = {\n\t'Alan Perlis': { \n\t\t'Artificial intelligence': 1.46, \n\t\t'Systems programming': 5.0, \n\t\t'Software engineering': 3.34, \n\t\t'Databases': 2.32\n\t},\n\n\t'Marvin Minsky': { \n\t\t'Artificial intelligence': 5.0, \n\t\t'Systems programming': 2.54,\n\t\t'Computation': 4.32, \n\t\t'Algorithms': 2.76\n\t},\n\n\t'John McCarthy': { \n\t\t'Artificial intelligence': 5.0, \n\t\t'Programming language theory': 4.72, \n\t\t'Systems programming': 3.25, \n\t\t'Concurrency': 3.61, \n\t\t'Formal methods': 3.58,\n\t\t'Computation': 3.23, \n\t\t'Algorithms': 3.03 \n\t},\n\n\t'Edsger Dijkstra': { \n\t\t'Programming language theory': 4.34, \n\t\t'Systems programming': 4.52,\n\t\t'Software engineering': 4.04, \n\t\t'Concurrency': 3.97,\n\t\t'Formal methods': 5.0, \n\t\t'Algorithms': 4.92 \n\t},\n\n\t'Donald Knuth': { \n\t\t'Programming language theory': 4.33, \n\t\t'Systems programming': 3.57,\n\t\t'Computation': 4.39, \n\t\t'Algorithms': 5.0 \n\t},\n\n\t'John Backus': { \n\t\t'Programming language theory': 4.58, \n\t\t'Systems programming': 4.43,\n\t\t'Software engineering': 4.38, \n\t\t'Formal methods': 2.42, \n\t\t'Databases': 2.80 \n\t},\n\n\t'Robert Floyd': { \n\t\t'Programming language theory': 4.24, \n\t\t'Systems programming': 2.17,\n\t\t'Concurrency': 2.92, \n\t\t'Formal methods': 5.0, \n\t\t'Computation': 3.18, \n\t\t'Algorithms': 5.0 \n\t},\n\n\t'Tony Hoare': { \n\t\t'Programming language theory': 4.64, \n\t\t'Systems programming': 4.38,\n\t\t'Software engineering': 3.62, \n\t\t'Concurrency': 4.88,\n\t\t'Formal methods': 4.72, \n\t\t'Algorithms': 4.38\n\t},\n\n\t'Edgar Codd': { \n\t\t'Systems programming': 4.60, \n\t\t'Software engineering': 3.54,\n\t\t'Concurrency': 4.28, \n\t\t'Formal methods': 1.53, \n\t\t'Databases': 5.0\n\t},\n\n\t'Dennis Ritchie': { \n\t\t'Programming language theory': 3.45, \n\t\t'Systems programming': 5.0,\n\t\t'Software engineering': 4.83,\n\t},\n\n\t'Niklaus Wirth': { \n\t\t'Programming language theory': 4.23, \n\t\t'Systems programming': 4.22,\n\t\t'Software engineering': 4.74, \n\t\t'Formal methods': 3.83, \n\t\t'Algorithms': 3.95\n\t},\n\n\t'Robin Milner': { \n\t\t'Programming language theory': 5.0, \n\t\t'Systems programming': 1.66,\n\t\t'Concurrency': 4.62, \n\t\t'Formal methods': 3.94,\n\t},\n\n\t'Leslie Lamport': { \n\t\t'Programming language theory': 1.5, \n\t\t'Systems programming': 2.76,\n\t\t'Software engineering': 3.76, \n\t\t'Concurrency': 5.0,\n\t\t'Formal methods': 4.93, \n\t\t'Algorithms': 4.63\n\t},\n\n\t'Michael Stonebraker': { \n\t\t'Systems programming': 4.67, \n\t\t'Software engineering': 3.86,\n\t\t'Concurrency': 4.14, \n\t\t'Databases': 5.0,\n\t},\n}\n\ndef euclidean_similarity(person1, person2):\n\n\tcommon_ranked_items = [itm for itm in data[person1] if itm in data[person2]]\n\trankings = [(data[person1][itm], data[person2][itm]) for itm in common_ranked_items]\n\tdistance = [pow(rank[0] - rank[1], 2) for rank in rankings]\n\n\treturn 1 / (1 + sum(distance))\n\ndef pearson_similarity(person1, person2):\n\n\tcommon_ranked_items = [itm for itm in data[person1] if itm in data[person2]]\n\n\tn = len(common_ranked_items)\n\n\ts1 = sum([data[person1][item] for item in common_ranked_items])\n\ts2 = sum([data[person2][item] for item in common_ranked_items])\n\n\tss1 = sum([pow(data[person1][item], 2) for item in common_ranked_items])\n\tss2 = sum([pow(data[person2][item], 2) for item in common_ranked_items])\n\n\tps = sum([data[person1][item] * data[person2][item] for item in common_ranked_items])\n\n\tnum = n * ps - (s1 * s2)\n\n\tden = math.sqrt((n * ss1 - math.pow(s1, 2)) * (n * ss2 - math.pow(s2, 2)))\n\n\treturn (num / den) if den != 0 else 0\n\n\n\ndef recommend(person, bound, similarity=pearson_similarity):\n\tscores = [(similarity(person, other), other) for other in data if other != person]\n\n\tscores.sort()\n\tscores.reverse()\n\tscores = scores[0:bound]\n\n\tprint (scores)\n\n\trecomms = {}\n\n\tfor sim, other in scores:\n\t\tranked = data[other]\n\n\t\tfor itm in ranked:\n\t\t\tif itm not in data[person]:\n\t\t\t\tweight = sim * ranked[itm]\n\n\t\t\t\tif itm in recomms:\n\t\t\t\t\ts, weights = recomms[itm]\n\t\t\t\t\trecomms[itm] = (s + sim, weights + [weight])\n\t\t\t\telse:\n\t\t\t\t\trecomms[itm] = (sim, [weight])\n\n\tfor r in recomms:\n\t\tsim, item = recomms[r]\n\t\trecomms[r] = sum(item) / sim\n\n\treturn recomms"
	],
	"mappings": "AAAA;AA8KA;AA9KA;AAAA;AAGA;AAiHA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}